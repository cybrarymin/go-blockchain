* Peer discovery

** Concepts and purpose

*** Peer discovery in peer-to-peer networks

- Peer discovery :: The peer discovery process is necessary in a peer-to-peer
  network to interconnect autonomous and self-contained nodes into the
  peer-to-peer network without a centralized authority. The peer discovery
  process happens automatically and periodically on every node. This ensures
  that every node independently builds its network of peers without any central
  authority. This also contributes to the resilience of the peer-to-peer network
  by dropping connections with nodes that have gone offline and automatically
  and continuously establishing connections with new healthy nodes. The peer
  discovery process on every node, except the bootstrap node, starts with the
  seed node that is the only explicitly provided peer address for a node to
  start discovering new peers. Usually the seed node is the bootstrap node. On
  start a new node fetches from the seed node a set of initial peers that are
  saved for periodic reference in order to build a network of peers for a node.
  A node maintains a list of unique healthy peers. A node fetches new peers from
  its list of known peers on the periodic basis. Only new peers are added to the
  list of known peers discarding already known peers and the node's own address.
- Peer discovery on the bootstrap node :: The bootstrap node is the only node
  that is started without providing the seed node. The bootstrap node builds the
  list of known peers by saving addresses of peers that have contacted the
  bootstrap node as part of the peer discovery process. Later on the bootstrap
  node employs exactly the same algorithm as any other node on the peer-to-peer
  network

** Design and implementation

*** The concurrency safe peer discovery type

- Peer discovery type :: The =peerDiscovery= type maintains the list of unique,
  healthy known peers and implements the peer discovery algorithm. The peer
  discovery algorithm is performed periodically in order to keep the node
  connected to healthy peers, discover new peers, drop unhealthy peers, and
  provide peers information to other components of a node e.g. transaction
  relay, block relay. The peer discovery type type is concurrency safe. Adding
  new peers and reading known peers is concurrency safe by employing
  *readers-writer mutex*. The readers-writer mutex improves throughput and
  reduces latency by allowing either multiple concurrent peers readers with no
  peers writer or a single peers writer without any peers readers. The peer
  discovery type contains the peer discovery configuration, the node context for
  graceful shutdown, the node waiting group to let the peer discovery algorithm
  to finish before the shutdown, the readers-writer mutex for safe concurrent
  access to the known peers, and a set of unique, healthy known peers
  | ~cfg peerDiscoveryCfg~      | Peer discovery configuration |
  | ~ctx context.Context~       | Node context                 |
  | ~wg *sync.WaitGroup~        | Node waiting group           |
  | ~mtx sync.RWMutex~          | Readers-writer mutex         |
  | ~peers map[string]struct{}~ | Set of unique known peers    |
  #+BEGIN_SRC go
type PeerDiscovery struct {
  cfg PeerDiscoveryCfg
  ctx context.Context
  wg *sync.WaitGroup
  mtx sync.RWMutex
  peers map[string]struct{}
}

func NewPeerDiscovery(
  ctx context.Context, wg *sync.WaitGroup, cfg PeerDiscoveryCfg,
) *PeerDiscovery {
  peerDisc := &PeerDiscovery{
    ctx: ctx, wg: wg, cfg: cfg, peers: make(map[string]struct{}),
  }
  if !peerDisc.Bootstrap() {
    peerDisc.AddPeers(peerDisc.cfg.seedAddr)
  }
  return peerDisc
}
  #+END_SRC

*** Adding and reading known peers

- Add peers :: The add peers method is concurrency safe and is executed every
  time the peer discovery algorithm fetches a list of peers from another node.
  There may be peers that are already known to the node in the fetched list of
  peers. The add peers method iterates over the fetched list of peers and adds
  only new peers to the node's list of known peers. The add peers method
  - Lock the peers set for writing
  - Iterate over a fetched list of peers from another node
  - Add only new, not yet known peers, to the list of known peers
  #+BEGIN_SRC go
func (d *PeerDiscovery) AddPeers(peers ...string) {
  d.mtx.Lock()
  defer d.mtx.Unlock()
  for _, peer := range peers {
    if peer != d.cfg.nodeAddr {
      _, exist := d.peers[peer]
      if !exist {
        fmt.Printf("<=> Peer %v\n", peer)
      }
      d.peers[peer] = struct{}{}
    }
  }
}
  #+END_SRC

- Read peers :: The read peers method is concurrency safe and is executed for
  every peer discovery cycle, when relaying validated transactions, when
  relaying validated blocks. The read peers method converts the set of known
  peers into a slice of known peers. The read peers method
  - Lock the peers for reading
  - Convert the set of known peers into a slice of known peers
  #+BEGIN_SRC go
func (d *PeerDiscovery) Peers() []string {
  d.mtx.RLock()
  defer d.mtx.RUnlock()
  peers := make([]string, 0, len(d.peers))
  for peer := range d.peers {
    peers = append(peers, peer)
  }
  return peers
}
  #+END_SRC

- Read peers with self-reference :: The read peers with the self-reference adds
  the node's own address to the list of known peers in order to relay proposed
  blocks to the proposing authority node itself. When the authority node
  creates, validates and proposes a new block, the block is relayed to all known
  peers including the authority node itself. This design allows to separate the
  block proposal algorithm from the block validation and confirmation algorithm
  even if two algorithms happen on the same node. The read peers with the
  self-reference method appends the node's own address to the list of known
  peers. The read peers with the self-reference method
  - Append the node's own address to the list of known peers
  #+BEGIN_SRC go
func (d *PeerDiscovery) SelfPeers() []string {
  return append(d.Peers(), d.cfg.nodeAddr)
}
  #+END_SRC

*** Node graceful shutdown mechanism

- Node graceful shutdown mechanism :: The node graceful shutdown mechanism
  avoids unexpected termination of concurrent processes in the middle of
  processing of a unit of work. The node graceful shutdown mechanism ensures
  that concurrent processes on the node are timely notified to shutdown and the
  node main goroutine waits for the concurrent processes to gracefully terminate
  after finishing they current unit of work. The node graceful shutdown
  mechanism is implemented using the single node context hierarchy shared
  between all concurrent processes for signaling a shutdown, and a shared wait
  group to let concurrent processes to terminate gracefully by finishing the
  current unit of work. The concurrent counter of the wait group is incremented
  every time a new concurrent process is started on the node. When the node
  receives a signal to shutdown, the signal is automatically propagated through
  the shared context hierarchy to all concurrent processes on the node. Every
  concurrent process finishes processing the current unit of work and decrements
  the concurrent counter of the shared wait group to indicated the graceful
  shutdown. The main node goroutine waits for all concurrent processes to
  notify graceful shutdown success when the concurrent counter of the wait group
  becomes zero and the node main goroutine gracefully terminates

*** The peer discovery algorithm

- Peer discovery algorithm :: The peer discovery algorithm is periodically
  executed in a separate goroutine within the node process. The peer discovery
  algorithm is fully integrated with the node graceful shutdown mechanism to
  avoid unexpected terminations in the middle of the peer discovery cycle. The
  peer discovery algorithm creates a recurrent tick with a configurable period
  that specifies the frequency of peer discovery cycles. The node shared wait
  group done is deferred to the end of peer discovery cycles. The peer discovery
  algorithm composes the node shared context hierarchy cancellation channel for
  graceful shutdown with the tick channel for the next peed discovery cycle. On
  the due time the peer discovery algorithm fetches peers from the list of known
  peers and adds new peers to the internal set of known peers. The peer
  discovery algorithm
  - Defer the node shared wait group done to indicate success of the graceful
    shutdown
  - Create a recurrent tick with a configurable period
  - Compose the node shared context hierarchy cancellation channel with the
    recurrent tick channel
  - For the recurrent tick
    - Fetch peers from the list of known peers
    - Add newly discovered peers to the list of known peers
  #+BEGIN_SRC go
func (d *PeerDiscovery) DiscoverPeers(period time.Duration) {
  defer d.wg.Done()
  tick := time.NewTicker(period)
  defer tick.Stop()
  for {
    select {
    case <- d.ctx.Done():
      return
    case <- tick.C:
      for _, peer := range d.Peers() {
        if peer != d.cfg.NodeAddr {
          peers, err := d.grpcPeerDiscover(peer)
          if err != nil {
            fmt.Println(err)
            continue
          }
          d.AddPeers(peers...)
        }
      }
    }
  }
}
  #+END_SRC

*** gRPC =PeerDiscover= method

The gRPC =Node= service provides the =PeerDiscover= method to fetch the list of
peers from a node. The interface of the service
#+BEGIN_SRC protobuf
message PeerDiscoverReq {
  string Peer = 1;
}

message PeerDiscoverRes {
  repeated string Peers = 1;
}

service Node {
  rpc PeerDiscover(PeerDiscoverReq) returns (PeerDiscoverRes);
}
#+END_SRC

The implementation of the =PeerDiscover= method
- Add the requesting peer address to the list of known peers if the servers is
  the bootstrap node, effectively collecting peers from the peer-to-peer network
- Return the list of known peers to the requesting peer
#+BEGIN_SRC go
func (s *NodeSrv) PeerDiscover(
  _ context.Context, req *PeerDiscoverReq,
) (*PeerDiscoverRes, error) {
  if s.peerDisc.Bootstrap() {
    s.peerDisc.AddPeers(req.Peer)
  }
  peers := s.peerDisc.Peers()
  res := &PeerDiscoverRes{Peers: peers}
  return res, nil
}
#+END_SRC

** Testing and usage

*** Testing gRPC =PeerDiscover= method

The =TestPeerDiscover= testing process
- Set up the bootstrap node
  - Create the peer discovery without starting for the bootstrap node
  - Set up the gRPC server and client for the bootstrap node
- Set up the new node
  - Create the gRPC node client
  - Call the =PeerDiscover= method to discover peers
- Verify that the new node address is returned in the list of discovered peers
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run PeerDiscover
#+END_SRC

*** Testing the peer discovery

The =TestPeerDiscovery= testing process
- Set up the bootstrap node
  - Create the peer discovery without staring for the bootstrap node
  - Start the gRPC server on the bootstrap node
- Set up the new node
  - Create and start the peer discovery for the new node
  - Wait for the peer discovery to discover peers
- Verify that the bootstrap node and the new node have discovered each other
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run PeerDiscovery
#+END_SRC
