* Transaction

** Concepts and purpose

*** Cryptographic hash functions

- Hash function :: A cryptographic hash function produces a /random looking,
  fixed length, unpredictable output/ (a random oracle) from an arbitrary large
  input. A hash function is /deterministic/: the same input produces the same
  output. A tiny change in the input produces a completely different output.
- Hash function and digital signature :: A hash function is used to check data
  integrity of a message and its copy. The hash of a message is a unique
  identifier of the message. Digitally signing a hash of a message is as secure
  as signing the message itself, but much faster

Security properties of a hash function
- *Pre-image resistance*. A hash function is a /one-way function/: given a hash,
  it is almost impossible to find the original input
- *Second pre-image resistance*. Given an input and its hash, it is almost
  impossible to find another input that has the same hash
- *Collision resistance*. It is almost impossible to find two different inputs
  that have the same hash. Collisions are inevitable because the output length
  is fixed, while the input is arbitrary large

*** Transactions between accounts on the blockchain

- Transaction :: A transaction between accounts on the blockchain represents a
  /transfer of value/ from a sender account to a recipient account. Every
  transaction must be digitally signed by the sender account that authorizes the
  transfer of value and authenticates the transaction. Multiple transactions are
  included in a block, which, in turn, is added to the blockchain once a
  consensus agreement is reached between participants. Confirmed /transactions
  are irreversible/. Confirmed /transactions are immutable/: It is almost
  impossible to change the order or content of confirmed transactions
- Double spending problem :: The situation when the same digital asset can be
  spent more then once. Only one of multiple transactions spending the same
  asset should be accepted while others must be rejected. This blockchain
  prevents the double spending problem by tracking in the blockchain both: the
  account balance to check for availability of funds, and the per-account nonce
  to order transactions from an account
- Transaction nonce :: A transaction nonce is a unique number used once per
  account to prevent the double spending problem, replay attacks, and ensure
  that each transaction from an account is processed in order

*** Digital signatures and verification of transactions

- Digital signature :: A /private signing key/ is used to produce a digital
  signature of a message. The corresponding /public verifying key/ is used to
  verify the digital signature. The digital signature proves /authenticity of a
  sender/ (origin authentication), /non-repudiation of a sender/, and /integrity
  of a message/ (message authentication)
- Sign transaction :: A hash of an /encoded transaction is signed with a private
  key/. The sign operation produces a signature that is used to verify the
  signed transaction
- Verify transaction :: A /public key is recovered/ from the hash of an encoded
  transaction and the associated signature. An account address derived from the
  recovered public key is compared with the =From= address of the signed
  transaction. If both addresses match, the signature is valid. A valid
  signature guarantees
  - *Authenticity of the sender*. The transaction has been signed by the owner
    of the =From= account, if the account private key has not been compromised
  - *Non-repudiation of the sender*. The sender cannot deny the act of sending
    the transaction, as the transaction must have been signed with the account
    private key
  - *Integrity of the transaction*. The transaction content is immutable since
    creation and has not been tampered with

** Design and implementation

*** Keccak256 hash function

Keccak256 hash function is used in this blockchain for hashing and signing of
transactions and blocks

- Keccak256 hash function :: The =Hash= type is a type alias to =[32]byte=. The
  Keccak256 hash function is implemented as the constructor function on the
  =Hash= type. To hash a value of specific type, this implementation requires
  the type to have defined JSON serialization that is used to encode the value
  before hashing. The =Hash= type defines string and byte slice representations
  of a hash, as well as JSON text marshal and unmarshal serialization methods
  #+BEGIN_SRC go
type Hash [32]byte

func NewHash(val any) Hash {
  jval, _ := json.Marshal(val)
  hash := make([]byte, 64)
  sha3.ShakeSum256(hash, jval)
  return Hash(hash[:32])
}

func (h Hash) String() string {
  return hex.EncodeToString(h[:])
}

func (h Hash) Bytes() []byte {
  hash := [32]byte(h)
  return hash[:]
}

func (h Hash) MarshalText() ([]byte, error) {
  return []byte(hex.EncodeToString(h[:])), nil
}

func (h *Hash) UnmarshalText(hash []byte) error {
  _, err := hex.Decode(h[:], hash)
  return err
}
  #+END_SRC

*** Transaction and signed transaction types

This implementation makes distinction between an initial transaction type =Tx=
before signing and a signed transaction type =SigTx= after signing. The =Tx=
type is only used for initial creation of a transaction, signing of a new
transaction, and verification of a signed transaction. Most of the blockchain
components work exclusively with the =SigTx= type

- =Tx= type :: The =Tx= type represents a transaction on the blockchain. The
  transaction defines the address of a sender account, the address of a
  recipient account, the value amount to be transferred, the per account
  nonce to prevent replay attacks, the double spending problem, and process
  transaction from an account in order, and, finally, the time of transaction
  signing. All transaction fields participate in producing the hash of a
  transaction that is used to sign a transaction
  | ~From Address~   | Address of a sender account    |
  | ~To Address~     | Address of a recipient account |
  | ~Value uint64~   | Value amount to be transferred |
  | ~Nonce uint64~   | Per account nonce              |
  | ~Time time.Time~ | time of transaction signing    |
  #+BEGIN_SRC go
type Tx struct {
  From Address `json:"from"`
  To Address `json:"to"`
  Value uint64 `json:"value"`
  Nonce uint64 `json:"nonce"`
  Time time.Time `json:"time"`
}

func NewTx(from, to Address, value, nonce uint64) Tx {
  return Tx{From: from, To: to, Value: value, Nonce: nonce, Time: time.Now()}
}

func (t Tx) Hash() Hash {
  return NewHash(t)
}
  #+END_SRC
- =SigTx= type :: The =SigTx= type embeds the =Tx= type and includes the
  transaction signature. The string representation of the signed transaction is
  defined to present a transaction to end users
  | ~Tx~         | Original transaction                          |
  | ~Sig []byte~ | Digital signature of the original transaction |
  #+BEGIN_SRC go
type SigTx struct {
  Tx
  Sig []byte `json:"sig"`
}

func NewSigTx(tx Tx, sig []byte) SigTx {
  return SigTx{Tx: tx, Sig: sig}
}

func (t SigTx) Hash() Hash {
  return NewHash(t)
}

func (t SigTx) String() string {
  return fmt.Sprintf(
    "tx %.7s: %.7s -> %.7s %8d %8d", t.Hash(), t.From, t.To, t.Value, t.Nonce,
  )
}
  #+END_SRC

*** ECDSA signing and verification of transactions

This blockchain uses the *Elliptic Curve Digital Signature Algorithm* (*ECDSA*)
for signing and verification of transactions. Specifically, the *Secp256k1
elliptic curve* is used for for signing and verification of transactions

- Secp256k1 transaction signing :: The transaction signing process requires the
  owner-provided password and is performed from the =Account= instance. The
  transaction signing process
  - Produce the Keccak256 hash of the input transaction
  - Sign the Keccak256 hash of the transaction using the ECDSA algorithm on the
    Secp256k1 elliptic curve
  - Construct a signed transaction by adding the produced digital signature to
    the input transaction
  #+BEGIN_SRC go
func (a Account) SignTx(tx Tx) (SigTx, error) {
  hash := tx.Hash().Bytes()
  sig, err := ecc.SignBytes(a.prv, hash, ecc.LowerS | ecc.RecID)
  if err != nil {
    return SigTx{}, err
  }
  stx := NewSigTx(tx, sig)
  return stx, nil
}
  #+END_SRC

- Secp256k1 transaction verification :: The transaction verification process
  does not require any external information like the owner-provided password.
  The signed transaction instance contains all the necessary information to
  verify the signed transaction. The transaction verification process
  - Recover the public key from the hash of the original embedded transaction
    and the transaction signature
  - Construct the account address from the recovered public key
  - If the constructed account address is equal to the =From= account address of
    the signed transaction, then the transaction signature is valid
  #+BEGIN_SRC go
func VerifyTx(tx SigTx) (bool, error) {
  hash := tx.Tx.Hash().Bytes()
  pub, err := ecc.RecoverPubkey("P-256k1", hash, tx.Sig)
  if err != nil {
    return false, err
  }
  acc := NewAddress(pub)
  return acc == tx.From, nil
}
  #+END_SRC

*** gRPC =TxSign= method

The gRPC =Tx= service provides the =TxSign= method to digitally sign new
transactions before sending them to the blockchain network. The interface of the
service
#+BEGIN_SRC protobuf
message TxSignReq {
  string From = 1;
  string To = 2;
  uint64 Value = 3;
  string Password = 4;
}

message TxSignRes {
  bytes Tx = 1;
}

service Tx {
  rpc TxSign(TxSignReq) returns (TxSignRes);
}
#+END_SRC

The implementation of the =TxSign= method
- Re-create the owner account using the owner-provided password
- Construct a new transaction from the request arguments
  - =From= specifies the sender address
  - =To= specifies the recipient address
  - =Value= the value amount to be transferred
- Request from the blockchain state and increment by 1 the current value of
  nonce for the sender account
- Sign the transaction with the sender account private key
- Encode the signed transaction
- Return the encoded signed transaction to a client
#+BEGIN_SRC go
func (s *TxSrv) TxSign(_ context.Context, req *TxSignReq) (*TxSignRes, error) {
  path := filepath.Join(s.keyStoreDir, req.From)
  acc, err := chain.ReadAccount(path, []byte(req.Password))
  if err != nil {
    return nil, err
  }
  tx := chain.NewTx(
    chain.Address(req.From), chain.Address(req.To), req.Value,
    s.txApplier.Nonce(chain.Address(req.From)) + 1,
  )
  stx, err := acc.SignTx(tx)
  if err != nil {
    return nil, err
  }
  jtx, err := json.Marshal(stx)
  if err != nil {
    return nil, err
  }
  res := &TxSignRes{Tx: jtx}
  return res, nil
}
#+END_SRC

** Testing and usage

*** Testing transaction signing and verification

The =TestAccountWriteReadSignTxVerifyTx= testing process
- Create a new account
- Persist the account to a file
- Re-create the account from a file
- Create a new transaction
- Sign the new transaction
- Verify the signature of the signed transaction
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run SignTxVerifyTx
#+END_SRC

*** Testing gRPC =TxSign= method

The =TestTxSign= testing process
- Create the genesis= and the blockchain state
- Create a new owner account protected with the owner-provided password
- Set up the gRPC transaction service and the gRPC transaction client
- Sign the transaction with the owner-provided password
- Verify the signature of the signed transaction
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run TxSign
#+END_SRC

*** Using =tx sign= CLI command

The gRPC =TxSign= method is exposed through the CLI. Create and sign a new
transaction on a blockchain node
- Start a blockchain node
  #+BEGIN_SRC fish
set node localhost:1122
set authpass password
./bcn node start --node $node --bootstrap --authpass $authpass
  #+END_SRC
- Create and sign a new transaction (in a new terminal)
  - =--node= specifies the node address
  - =--from= defines the sender account address
  - =--value= defines the recipient account address
  - =--ownerpass= provides the sender account password to sign the transaction
  #+BEGIN_SRC fish
set sender d54173365ca6c47d482b0a06ba4f196049014145093778427383de19d66a76d7
set ownerpass password
./bcn tx sign --node $node --from $sender --to recipient --value 12 \
  --ownerpass $ownerpass
  #+END_SRC
  Structure of the signed encoded transaction
  #+BEGIN_SRC json
{
  "from":"d54173365ca6c47d482b0a06ba4f196049014145093778427383de19d66a76d7",
  "to":"recipient",
  "value":12,
  "nonce":1,
  "time":"2024-09-29T09:57:28.65978649+02:00",
  "sig":"Cz+qV8DaD+sCnaLnTR2S49a/9nwsYbe2EF8Y6Upa/vYoGY7P9qSmzDSBBHQolg6KdxIiS/NrXvcevLiSYJpbvQE="
}
  #+END_SRC
