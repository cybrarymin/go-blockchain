* Account

** Concepts and purpose

*** Account components and operations

- Account :: An account represents a /digital identity/ on the blockchain. An
  account represents /user's ownership of assets/ on the blockchain. An account
  can hold, send and receive cryptocurrency and tokens. An account has an
  associated /digital ledger/ of transactions and the /current balance/

Account components
- *Private key* is a /large randomly generated secret number/ used to control
  assets on the blockchain by signing transactions
- *Public address* is a /hash of the public key/ (derived from the private key)
  that uniquely identifies an account on the blockchain
- *Current balance* is the /amount of divisible cryptocurrency/ or /indivisible
  tokens/ controlled by the private key of an account
- *Transactions* is a time-ordered /list of debit and credit transactions/
  involving an account

Operations on an account
- *Create an account*, derive a public address, and store a password-protected
  private key
- *Sign a transaction* with the private key of an account
- *Verify a transaction signature* against the public address of the signing
  account
- *Check the current balance* of cryptocurrency and tokens
- *List transactions* enumerate debit and credit transactions involving an
  account

*** Private and public keys

Accounts on the blockchain are represented by key pairs each consisting of a
private and a public key

- Private key :: A private key is a /large randomly generated secret number/
  that is used to /derive a public key/ and /digitally sign transactions/. A
  private key *must be kept in secret* to /preserve account authenticity/ and
  /control account assets/ on the blockchain
- Public key :: A public key is a /pair of large numbers/ derived from a private
  key. A public key is used to /identify an account/ on the blockchain and
  /verify transactions/ signed with the corresponding private key. A public key
  *can be safely shared* with any participant on the blockchain

** Design and implementation

*** Elliptic-curve cryptography Secp256k1 key pair

The implementation of this blockchain uses the *Elliptic-Curve Cryptography*
(*ECC*). Specifically, the *Secp256k1 elliptic curve* is used for generation of
key pairs for accounts on the blockchain, as well as signing and verification of
transactions on the blockchain

- Secp256k1 public key :: The public key holds the name =P-256k1= of the =Curve=
  and two large numbers =X= and =Y= derived from the corresponding private key
  #+BEGIN_SRC go
type p256k1PublicKey struct {
  Curve string `json:"curve"`
  X *big.Int `json:"x"`
  Y *big.Int `json:"y"`
}

func newP256k1PublicKey(pub *ecdsa.PublicKey) p256k1PublicKey {
  return p256k1PublicKey{Curve: "P-256k1", X: pub.X, Y: pub.Y}
}
  #+END_SRC
- Secp256k1 private key :: The private key holds the large secret number =D= and
  embeds the derived public key =p256k1PublicKey=. The ~*ecdsa.PublicKey~ and
  =*ecdsa.PrivateKey= components can be retrieved from a =p256k1PrivateKey=
  instance
  #+BEGIN_SRC go
type p256k1PrivateKey struct {
  p256k1PublicKey
  D *big.Int `json:"d"`
}

func newP256k1PrivateKey(prv *ecdsa.PrivateKey) p256k1PrivateKey {
  return p256k1PrivateKey{
    p256k1PublicKey: newP256k1PublicKey(&prv.PublicKey), D: prv.D,
  }
}

func (k *p256k1PrivateKey) publicKey() *ecdsa.PublicKey {
  return &ecdsa.PublicKey{Curve: ecc.P256k1(), X: k.X, Y: k.Y}
}

func (k *p256k1PrivateKey) privateKey() *ecdsa.PrivateKey {
  return &ecdsa.PrivateKey{PublicKey: *k.publicKey(), D: k.D}
}
  #+END_SRC

The =p256k1PublicKey= and =p256k1PrivateKey= types are used for JSON encoding
and decoding of private and public keys, which, in turn, is used for persistence
and retrieval of accounts on the blockchain

*** Account address with Keccak256 hash function

- Account address :: An account address uniquely identifies an account on the
  blockchain and can be safely shared with any participant on the blockchain. An
  account address is the /Keccak256 hash of an encoded public key/ associated
  with the account. The account =Address= is implemented as a type alias to a
  =string=. An account address is calculated from a =*ecdsa.PublicKey=
  #+BEGIN_SRC go
type Address string

func NewAddress(pub *ecdsa.PublicKey) Address {
  jpub, _ := json.Marshal(newP256k1PublicKey(pub))
  hash := make([]byte, 64)
  sha3.ShakeSum256(hash, jpub)
  return Address(hex.EncodeToString(hash[:32]))
}
  #+END_SRC

*** Account with Secp256k1 key pair

- Account :: An account contains a /Secp256k1 private key/ =prv= and an /account
  address/ =addr= derived from the corresponding Secp256k1 public key. A new
  Secp256k1 key pair is generated when a =NewAccount= is created
  #+BEGIN_SRC go
type Account struct {
  prv *ecdsa.PrivateKey
  addr Address // derived
}

func NewAccount() (Account, error) {
  prv, err := ecdsa.GenerateKey(ecc.P256k1(), rand.Reader)
  if err != nil {
    return Account{}, err
  }
  addr := NewAddress(&prv.PublicKey)
  return Account{prv: prv, addr: addr}, nil
}
  #+END_SRC

A private key is the only piece of information required to re-create an account
after persistence to a secured file controlled by the owner of an account.
Accounts on this blockchain are persisted to files with restricted access. A
private key is encrypted with a password before being persisted to a file. Only
the owner of an account can re-create and use a persisted account by providing
the password

- Account persistence :: The account persistence process
  - Encode a key pair to JSON
  - Encrypt the encoded key pair with the owner-provided password
  - Write the encrypted key pair to a file with restricted access
  #+BEGIN_SRC go
func (a Account) Write(dir string, pass []byte) error {
  jprv, err := a.encodePrivateKey()
  if err != nil {
    return err
  }
  cprv, err := encryptWithPassword(jprv, pass)
  if err != nil {
    return err
  }
  err = os.MkdirAll(dir, 0700)
  if err != nil {
    return err
  }
  path := filepath.Join(dir, string(a.Address()))
  return os.WriteFile(path, cprv, 0600)
}
  #+END_SRC

The JSON encoded key pair before encryption has the following form
#+BEGIN_SRC json
{
  "curve":"P-256k1",
  "x":76146145399705616720589739763260279141573762368317905858350098027838154138247,
  "y":38666865918508785210169373834294899085353404099611077977239116930574874120850,
  "d":4551610683346874789776802044583374602892654338372126162371523966290596962565
}
#+END_SRC

- Account re-creation :: The account re-creation process
  - Read the encrypted key pair from a file
  - Decrypt the the encrypted key pair with the owner-provided password
  - Decode the encoded key pair to a private key
  - Re-create the account from the decoded private key
  #+BEGIN_SRC go
func ReadAccount(path string, pass []byte) (Account, error) {
  cprv, err := os.ReadFile(path)
  if err != nil {
    return Account{}, err
  }
  jprv, err := decryptWithPassword(cprv, pass)
  if err != nil {
    return Account{}, err
  }
  return decodePrivateKey(jprv)
}
  #+END_SRC

*** AES-GCM encryption with Argon2 KDF of Secp256k1 key pairs

- AES-GCM encryption with Argon2 KDF :: The encryption process
  - *Argon2 key derivation function* (*KDF*) derives a cryptographically strong
    encryption key from the owner-provided password and a randomly generated
    salt
  - Create the *AES block cipher* that uses the derived cryptographically strong
    encryption key
  - Create the *AES-GCM encryption mode* from the AES block cipher
  - AES-GCM encrypts the encoded key pair with the randomly generated nonce
  - Pack the random salt, the random nonce, and the ciphertext all together into
    a slice of bytes to be written to a file. Both the salt for the Argon2 KDF
    and the nonce for the AES-GCM are public, but must be unique
    #+BEGIN_SRC go
  func encryptWithPassword(msg, pass []byte) ([]byte, error) {
    salt := make([]byte, encKeyLen)
    _, err := rand.Read(salt)
    if err != nil {
      return nil, err
    }
    key := argon2.IDKey(pass, salt, 1, 256, 1, encKeyLen)
    blk, err := aes.NewCipher(key)
    if err != nil {
      return nil, err
    }
    gcm, err := cipher.NewGCM(blk)
    if err != nil {
      return nil, err
    }
    nonce := make([]byte, gcm.NonceSize())
    _, err = rand.Read(nonce)
    if err != nil {
      return nil, err
    }
    ciph := gcm.Seal(nonce, nonce, msg, nil)
    ciph = append(salt, ciph...)
    return ciph, nil
  }
    #+END_SRC

- AES-GCM decryption with Argon2 KDF :: The decryption process
  - *Argon2 KDF* derives the encryption key from the owner-provided password and
    the random salt extracted from the ciphertext
  - Create the *AES block cipher* that uses the derived cryptographically strong
    encryption key
  - Create the *AES-GCM encryption mode* from the AES block cipher
  - AES-GCM decrypts the encoded key pair using the ciphertext and the random
    nonce extracted from the ciphertext
    #+BEGIN_SRC go
  func decryptWithPassword(ciph, pass []byte) ([]byte, error) {
    salt, ciph := ciph[:encKeyLen], ciph[encKeyLen:]
    key := argon2.IDKey(pass, salt, 1, 256, 1, encKeyLen)
    blk, err := aes.NewCipher(key)
    if err != nil {
      return nil, err
    }
    gcm, err := cipher.NewGCM(blk)
    if err != nil {
      return nil, err
    }
    nonceLen := gcm.NonceSize()
    nonce, ciph := ciph[:nonceLen], ciph[nonceLen:]
    msg, err := gcm.Open(nil, nonce, ciph, nil)
    if err != nil {
      return nil, err
    }
    return msg, nil
  }
    #+END_SRC

*** gRPC =AccountCreate= method

The gRPC =Account= service provides the =AccountCreate= method to create new
accounts on the blockchain. The interface of the service
#+BEGIN_SRC protobuf
message AccountCreateReq {
  string Password = 1;
}

message AccountCreateRes {
  string Address = 1;
}

service Account {
  rpc AccountCreate(AccountCreateReq) returns (AccountCreateRes);
}
#+END_SRC

The implementation of the =AccountCreate= method
- Validate the owner-provided password
- Create a new account with the corresponding key pair
- Write the key pair to the local key store of the node
#+BEGIN_SRC go
func (s *AccountSrv) AccountCreate(
  _ context.Context, req *AccountCreateReq,
) (*AccountCreateRes, error) {
  pass := []byte(req.Password)
  if len(pass) < 5 {
    return nil, status.Errorf(
      codes.InvalidArgument, "password length is less than 5",
    )
  }
  acc, err := chain.NewAccount()
  if err != nil {
    return nil, err
  }
  err = acc.Write(s.keyStoreDir, pass)
  if err != nil {
    return nil, err
  }
  res := &AccountCreateRes{Address: string(acc.Address())}
  return res, nil
}
#+END_SRC

*** gRPC =AccountBalance= method

The gRPC =Account= service provides the =AccountBalance= method to check the
balance of an account. The interface of the service
#+BEGIN_SRC protobuf
message AccountBalanceReq {
  string Address = 1;
}

message AccountBalanceRes {
  uint64 Balance = 1;
}

service Account {
  rpc AccountBalance(AccountBalanceReq) returns (AccountBalanceRes);
}
#+END_SRC

The implementation of the =AccountBalance= method
- Check the balance of the requested account if the balance entry exists in the
  blockchain state. The account can be created, but the balance entry in the
  blockchain state will be included only after the first transaction involving
  the account
#+BEGIN_SRC go
func (s *AccountSrv) AccountBalance(
  _ context.Context, req *AccountBalanceReq,
) (*AccountBalanceRes, error) {
  acc := req.Address
  balance, exist := s.balChecker.Balance(chain.Address(acc))
  if !exist {
    return nil, status.Errorf(
      codes.NotFound, fmt.Sprintf(
        "account %v does not exist or has not yet transacted", acc,
      ),
    )
  }
  res := &AccountBalanceRes{Balance: balance}
  return res, nil
}
#+END_SRC

** Testing and usage

*** Testing account persistence and re-creation

The =TestAccountWriteReadSignTxVerifyTx= testing process
- Create a new account
- Persist the account to a file
- Re-create the account from a file
- Verify that the re-created account correctly signs and verifies transactions
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run AccountWriteRead
#+END_SRC

*** Testing gRPC =AccountCreate= method

The =TestAccountCreate= testing process
- Set up the gRPC =Account= service and the gRPC =Account= client
- Call the gRPC =AccountCreate= method with the owner-provided password to
  create a new account on the blockchain
- Verify that the returned account address length is correct
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run AccountCreate
#+END_SRC

*** Testing gRPC =AccountBalance= method

The =TestAccountBalance= testing process
- Create the =Genesis= and the blockchain =State=
- Set up the gRPC =Account= service and the gRPC =Account= client
- Check balance of an existing account
  - Call the gRPC =AccountBalance= method with the account address of the
    initial owner from the genesis
  - Verify that the correct balance is returned
- Check balance of a non-existing account
  - Call the gRPC =AccountBalance= method with a non-existing account address
  - Verify that the not found error is returned
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run AccountBalance
#+END_SRC

*** Initializing and starting a blockchain node

This blockchain consists of an in-memory =State= that holds balances and nonces
of all accounts, a reference to the last confirmed block, and pending
transactions sent by external clients or relayed by other nodes that are not yet
validated and packed into a confirmed block. Every confirmed block is
immediately appended to the =block.store= file. A blockchain =Node= manages the
blockchain =State= and interactions with other blockchain nodes connected
through a peer-to-peer network. All interactions between blockchain nodes and
with external blockchain clients are performed at any blockchain node through
the *gRPC interface*. A single blockchain node is autonomous, self-contained,
and provides the same gRPC services as a peer-to-peer blockchain network

- Initialization of a bootstrap and authority blockchain node :: The
  initialization of a bootstrap and authority blockchain node requires providing
  the =--node= address, making the node =--bootstrap= node for the initial peer
  discovery and also making the node the authority node for the PoA consensus,
  providing the =--authpass= password for the authority account to sign the
  genesis and blocks on the blockchain, providing the =--ownerpass= password and
  the initial =--balance= for the first owner account on the blockchain.
  Initialize a bootstrap and authority blockchain node with the below command
#+BEGIN_SRC fish
./bcn node start --node $node --bootstrap --authpass $authpass \
  --ownerpass $ownerpass --balance 1000
TODO output
#+END_SRC
- Start of an initialized bootstrap and authority blockchain node :: An already
  initialized bootstrap and authority blockchain node is started with the
  following command
#+BEGIN_SRC fish
./bcn node start --node $node --bootstrap --authpass $authpass
TODO output
#+END_SRC

*** Using =account create= CLI command

The gRPC =AccountCreate= method is exposed through the CLI. To create a new
account on the blockchain and store its key pair on the blockchain node run the
following commands in a terminal
- Start a blockchain node
#+BEGIN_SRC fish
./bcn node start --node $node --bootstrap --authpass $authpass
#+END_SRC
- Create a new account (in a new terminal) by providing the =--node= address and
  the =--ownerpass= password for the new owner account
#+BEGIN_SRC fish
./bcn account create --node $node --ownerpass $ownerpass
acc: 596cd4370df451aa9403dddf7febc949fa729eab8f2bdceebbc24477d6f4c80f
#+END_SRC

*** Using =account balance= CLI command

The gRPC =AccountBalance= method is exposed through the CLI. To check the
balance of an initial owner account or an account that have already transacted
on the blockchain run the following command in a terminal
- Start a blockchain node
#+BEGIN_SRC fish
./bcn node start --node $node --bootstrap --authpass $authpass
#+END_SRC
- Get the account address of the initial owner from the genesis file at
  =.keystore<port>/genesis.json= that has the below structure
#+BEGIN_SRC json
{
  "chain": "blockchain",
  "authority": "f562ef45023a56a62a0a700d4f347affc0b0401dc77ab69cd8b0ac40b9c79249",
  "balances": {
    "d54173365ca6c47d482b0a06ba4f196049014145093778427383de19d66a76d7": 1000
  },
  "time": "2024-09-28T14:40:34.749369849+02:00",
  "sig": "yVlFB9LImlegWJ9XzLZ4Wslr+zTWBUQ1hanrzdABShN4KTZeYlc/jQbQerV68EKeqvpf8BmWOdmXhlRXA1wsOAA="
}
#+END_SRC
- Get the balnace of the initial owner account from the genesis file with the
  following command
#+BEGIN_SRC fish
./bcn account balance --node $node --account d54173365ca6c47d482b0a06ba4f196049014145093778427383de19d66a76d7
d54173365ca6c47d482b0a06ba4f196049014145093778427383de19d66a76d7: 1000
#+END_SRC
