* Event stream

** Concepts and purpose

*** Streaming events from a node to subscribed clients

- Node event stream :: The node event stream publishes important domain events
  about the state transitions of the blockchain to external clients subscribed
  to the node event stream. The node event stream is the mechanism to notify
  external applications about state changes on the blockchain. State changes on
  the blockchain include confirmation of a new block, confirmation of every
  transaction in a confirmed block. Every node on the blockchain publishes
  important domain events to the node event stream. The node event stream is
  multiplexed over the subscribed clients, so every subscribed client gets a
  replica of either all events published to the node event stream or a subset of
  events in accordance with the requested event types e.g. only confirmed
  blocks, or only confirmed transactions. When a client subscribes to the node
  event stream, the client specifies the types of events that the client is
  interested in. At any time the client can stop consuming events from the node
  event stream. In this case the node stops producing domain events on this
  specific channel. The node event stream multiplexed over client subscriptions
  decouples the node infrastructure from external applications, takes advantage
  of the scalability and resilience of the publish-subscribe style of
  communication, and isolates each subscribed clients in a dedicated execution
  flow that does not impact other subscribed clients in face of failure on a
  specific subscription

** Design and implementation

*** Event type and event publisher interface

- Event type :: The =Event= type represents a domain events that informs about a
  state transition on a blockchain node in particular and on the blockchain
  network in general. The event type carries information about the type of event
  that specifies the event object e.g. a transaction, a block; the action taken
  on the event object e.g. validated; and the encoded body of the object
  providing further details about the object. The set of supported types of
  events is defined by the =EventType= type. The currently supported events are
  all known events, transactions, blocks
  | ~Type EventType~ | Type of event of the object |
  | ~Action string~  | Action taken on the object  |
  | ~Body []byte~    | Encoded body of the object  |
  #+BEGIN_SRC go
type EventType uint64

const (
  EvAll EventType = 0
  EvTx EventType = 1
  EvBlock EventType = 2
)

type Event struct {
  Type EventType `json:"type"`
  Action string `json:"action"`
  Body []byte `json:"body"`
}

func NewEvent(evType EventType, action string, body []byte) Event {
  return Event{Type: evType, Action: action, Body: body}
}
  #+END_SRC

- Event publisher interface :: The =EventPublisher= interface provides a uniform
  access for any node component to publish different types of events through to
  the node event stream. The event publisher interface decouples every node
  component e.g. the block proposer from a concrete implementation of node event
  stream infrastructure. This design allows independent evolution of the node
  event stream infrastructure without impacting node components that publish
  domain events
  #+BEGIN_SRC go
type EventPublisher interface {
  PublishEvent(event Event)
}
  #+END_SRC

*** Event stream type

- Event stream type :: The =EventStream= type connects the signle inbound event
  channel with the set of outbound event stream channels each dedicated to a
  subscribed client. The event stream type receives domain events published by
  node components through the event publisher interface and multiplexes the
  received domain events to every subscribed client through the dedicated event
  stream channel. The event stream is concurrency safe. The single inbound event
  channel automatically handles concurrent requests to publish events from the
  node components. A mutex is used to handle concurrent requests to add new
  client subscriptions or removing closed client subscriptions. The event stream
  type is fully integrated into the node graceful shutdown mechanism. The node
  shared context hierarchy signals a graceful shutdown. The node shared wait
  group lets time for node components to gracefully shutdown before terminating
  the node's main goroutine. The event stream type implements the event
  publisher interface. This allows any node component interested in publishing
  events to depend only on the event publisher interface, rather that on the
  entire event stream type. The event stream type contains the node shared
  context hierarchy and the node shared wait group for the node graceful
  shutdown mechanism. The event stream type contains the single inbound event
  channel that receives all events published by all node components. The event
  stream type contains the varying map of outbound client subscription channels
  as clients are subscribed and unsubscribed from the node event stream. Adding
  new client subscription to the map and removing closed client subscription
  from the map is concurrency safe. The event stream type contains a mutex to
  manage concurrency safe addition and removal of client subscriptions. Each
  client subscription is identified by a randomly generated number. The varying
  map keeps the relation between the subscriptions identified by randomly
  generated numbers and corresponding outbound event stream channels. The events
  published to the single inbound event channel are multiplexed by the event
  stream type to each outbound event stream channel and further delivered to
  subscribed clients trough the gRPC server streaming
  | ~ctx context.Context~                   | Node shared context hierarchy         |
  | ~wg *sync.WaitGroup~                    | Node shared wait group                |
  | ~chEvent chan chain.Event~              | Node inbound event channel            |
  | ~mtx sync.Mutex~                        | Event streams mutex                   |
  | ~chStreams map[string]chan chain.Event~ | Client outbound event stream channels |
  #+BEGIN_SRC go
type EventStream struct {
  ctx context.Context
  wg *sync.WaitGroup
  chEvent chan chain.Event
  mtx sync.Mutex
  chStreams map[string]chan chain.Event
}

func NewEventStream(
  ctx context.Context, wg *sync.WaitGroup, cap int,
) *EventStream {
  return &EventStream{
    ctx: ctx, wg: wg, chEvent: make(chan chain.Event, cap),
    chStreams: make(map[string]chan chain.Event),
  }
}

func (s *EventStream) PublishEvent(event chain.Event) {
  s.chEvent <- event
}
  #+END_SRC

*** Adding and removing subscribers

- Addition and removal of subscriptions :: The addition of new subscribed
  clients to the node event stream and the removal of closed subscription
  happens concurrently to the publishing of domain events and their multiplexing
  to the outbound event stream channels. The mapping of client subscriptions to
  the corresponding outbound event stream channels is concurrency safe and is
  protected with a mutex. Each client subscription is identified by a randomly
  generated number that is the key in the mapping. When a client subscription is
  closed, the corresponding outbound event stream channel is closed and the
  client subscription identified by the randomly generated number is removed
  from the mapping. This design contributes to the resilience of concurrent
  handling of coming and going client subscriptions, while maintaining reliable
  delivery of published domain events to active client subscriptions, and
  without impacting other concurrent processes on the node

- Add client subscription :: To add a new client subscription to the node event
  stream the mapping of outbound event stream channels is locked for writing, a
  new outbound event stream channel is created and stored in the mapping under
  the randomly generated number that identifies the client subscription. The add
  client subscription process
  - Lock the mapping of outbound event stream channels for writing
  - Create a new outbound event stream channel
  - Add the new outbound event stream channel to the mapping
  #+BEGIN_SRC go
func (s *EventStream) AddSubscriber(sub string) chan chain.Event {
  s.mtx.Lock()
  defer s.mtx.Unlock()
  chStream := make(chan chain.Event)
  s.chStreams[sub] = chStream
  fmt.Printf("<~> Stream: %v\n", sub)
  return chStream
}
  #+END_SRC

- Remove client subscription :: To remove a closed client subscription from the
  node event stream the mapping of outbound event stream channels is locked for
  writing, the corresponding outbound event stream channel is located under the
  client subscription identifier. Then the outbound event stream channel is
  closed and the client subscription is removed from the mapping of active
  client subscriptions. The remove client subscription process
  - Lock the mapping of outbound event stream channels for writing
  - Locate the outbound event stream channel in the mapping of active client
    subscriptions
  - Close the outbound event stream channel
  - Remove the client subscription from the mapping of active client
    subscriptions
  #+BEGIN_SRC go
func (s *EventStream) RemoveSubscriber(sub string) {
  s.mtx.Lock()
  defer s.mtx.Unlock()
  chStream, exist := s.chStreams[sub]
  if exist {
    close(chStream)
    delete(s.chStreams, sub)
    fmt.Printf("<~> Unsubscribe: %v\n", sub)
  }
}
  #+END_SRC

*** Streaming events to subscribed clients

- Multiplexing events to outbound channels :: Every domain event published by
  any node component is received on the single inbound event channel. Every
  domain event is forwarded to all active client subscriptions by multiplexing
  the single inbound event channel to all outbound event stream channels
  representing active client subscriptions. The multiplexing of the node event
  stream is fully integrated with the node graceful shutdown. When the node
  shared context is canceled, all active client subscriptions are closed and
  removed from the mapping of active client subscriptions. when a new domain
  event is published ot the node event channel, the domain event is forwarded to
  all outbound event stream channels of all active client subscriptions. The
  process of multiplexing events to outbound channels
  - Combine the node shared context cancellation channel with the node single
    event channel
    - When the node shared context is canceled, close all active client
      subscriptions and terminate forwarding domain events to subscribed clients
    - When a new domain event is published by any node component, forward the
      domain event to all active client subscriptions
  #+BEGIN_SRC go
func (s *EventStream) StreamEvents() {
  defer s.wg.Done()
  for {
    select {
    case <- s.ctx.Done():
      for sub := range s.chStreams {
        s.RemoveSubscriber(sub)
      }
      return
    case event := <- s.chEvent:
      for _, chStream := range s.chStreams {
        chStream <- event
      }
    }
  }
}
  #+END_SRC

*** gRPC =StreamSubscribe= method

The gRPC =Node= service provides the =StreamSubscribe= method to let clients to
subscribe to the node provided stream of domain events optionally specifying a
subset of event types of interest. The interface of the service
#+BEGIN_SRC protobuf
message StreamSubscribeReq {
  repeated uint64 EventTypes = 1;
}

message StreamSubscribeRes {
  bytes Event = 1;
}

service Node {
  rpc StreamSubscribe(StreamSubscribeReq) returns (stream StreamSubscribeRes);
}
#+END_SRC

The implementation of the =StreamSubscribe= method
- Generate a random identifier for the new client subscription
- Add the new client subscription to the mapping of active client subscriptions
- Create the outbound event stream channel for the client subscription
- Defer removal of the client subscription from the mapping of active client
  subscriptions
- Combine the node shared context cancellation channel with the outbound event
  stream channel
  - When the node shared context is canceled, stop forwarding domain events to
    the client
  - When a new domain event is published, check if the event is of interest for
    the client, and, if interested, encode and send the domain event to the
    subscribed client through the gRPC server stream
#+BEGIN_SRC go
func (s *NodeSrv) StreamSubscribe(
  req *StreamSubscribeReq, stream grpc.ServerStreamingServer[StreamSubscribeRes],
) error {
  sub := fmt.Sprint(rand.Intn(999999))
  chStream := s.evStreamer.AddSubscriber(sub)
  defer s.evStreamer.RemoveSubscriber(sub)
  for {
    select {
    case <- stream.Context().Done():
      return nil
    case event, open := <- chStream:
      if !open {
        return nil
      }
      if slices.Contains(req.EventTypes, uint64(0)) ||
        slices.Contains(req.EventTypes, uint64(event.Type)) {
        jev, err := json.Marshal(event)
        if err != nil {
          fmt.Println(err)
          continue
        }
        res := &StreamSubscribeRes{Event: jev}
        err = stream.Send(res)
        if err != nil {
          return status.Errorf(codes.Internal, err.Error())
        }
      }
    }
  }
}
#+END_SRC

** Testing and usage

*** Testing gRPC =StreamSubscribe= method

The =TestStreamSubscribe= testing process
- Create and start the event stream on the node
- Set up the gRPC server and client
- Create the gRPC node client
- Call the =StreamSubscribe= method to subscribe to the node event stream and
  establish the gRPC server stream of domain events
- Start publishing domain events to the node event stream through the event
  publisher interface
- Start consuming events from the gRPC server stream of domain events. For each
  received domain event
  - Decode the received domain event
  - Verify that the type and the action of the domain event are correct
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run StreamSubscribe
#+END_SRC

*** Testing the event stream

The =TestEventStream= testing process
- Set up the bootstrap node
  - Create the peer discovery without starting for the bootstrap node
  - Initialize the state on the bootstrap node by creating the genesis
  - Create and start the block relay for the bootstrap node
  - Re-create the authority account from the genesis to sign blocks
  - Create and start the block proposer on the bootstrap node
  - Create and start the event stream on the bootstrap node
  - Start the gRPC server on the bootstrap node
  - Wait for the gRPC server of the bootstrap node to start
  - Get the initial owner account and its balance from the genesis
  - Re-create the initial owner account from the genesis
  - Sign and send several signed transactions to the bootstrap node
- Set up the client that subscribes to the node event stream
  - Set up a gRPC client connection with the bootstrap node
  - Create the gRPC node client
  - Call the =StreamSubscribe= method to subscribe to the node event stream and
    establish the gRPC server stream of domain events
  - Define the expected events to receive after a successful block proposal
  - Start consuming events from the gRPC server stream of domain events. For
    each received event
    - Decode the received domain event
    - Verify that the type and the action of the domain event are correct
#+BEGIN_SRC fish
go test -v -cover -coverprofile=coverage.cov ./... -run EventStream
#+END_SRC

*** Using the =node subscribe= CLI command

The gRPC =StreamSubscribe= method is exposed through the CLI. Subscribe a client
to the node event stream and consume domain events
- Start the bootstrap node
  #+BEGIN_SRC fish
set boot localhost:1122
set authpass password
./bcn node start --node $boot --bootstrap --authpass $authpass
  #+END_SRC
- Subscribe a client to the node event stream (in a new terminal)
  - =--node= specifies the node address where the client subscribes
  - =--events= specifies the event types of interest. Supported values are
    =all=, =blk=, =tx=
    #+BEGIN_SRC fish
  ./bcn node subscribe --node $boot --events blk,tx
  # <~> blk validated
  # blk       6: fac1c51 -> 202ac37
  # tx  9596fbb: 1dc6773 -> 0b283b3        2        6
  # tx  00b3fca: 0b283b3 -> 1dc6773        1        6
  #
  # <~> tx validated
  # tx  9596fbb: 1dc6773 -> 0b283b3        2        6
  # <~> tx validated
  # tx  00b3fca: 0b283b3 -> 1dc6773        1        6
    #+END_SRC
- Define a shell function to create, sign, and send a transaction
  #+BEGIN_SRC fish
function txSignAndSend -a node from to value ownerpass
  set tx (./bcn tx sign --node $node --from $from --to $to --value $value \
    --ownerpass $ownerpass)
  echo $tx
  ./bcn tx send --node $node --sigtx $tx
end
  #+END_SRC
- Create, sign, and send two valid transaction (in a new terminal)
  #+BEGIN_SRC fish
set acc1 1dc67739c409b169d8f981525366355694c7de9e24188d1814a7e2159857a878
set acc2 0b283b314c12c66ce7ad65da7d5ab3008d28e25a988308721f010e5a04f23247
set ownerpass password
txSignAndSend $boot $acc1 $acc2 2 $ownerpass
txSignAndSend $boot $acc2 $acc1 1 $ownerpass
  #+END_SRC
